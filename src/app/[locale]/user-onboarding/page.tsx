"use client";

import { MultiStepFormRenderer } from "@/components/renderer/MultiStepFormRenderer";
import { multiStepForm } from "@/lib/multi-step-form-builder";
import {
  createInputField,
  createSelectField,
  createDatePickerField,
  createEkycField,
  createConfirmationField,
} from "@/lib/field-builder";
import { User, Shield, CheckCircle } from "lucide-react";

// Build the user onboarding form
const userOnboardingForm = multiStepForm()
  // Step 1: Basic Information
  .addStep(
    "basic-info",
    "Th√¥ng tin c∆° b·∫£n",
    [
      createInputField("fullName", {
        label: "H·ªç v√† t√™n",
        placeholder: "Nguy·ªÖn VƒÉn A",
        validations: [
          { type: "required", messageKey: "form.error.required" },
          { type: "minLength", value: 3, messageKey: "form.error.minLength" },
        ],
      }),

      createInputField("email", {
        type: "email",
        label: "Email",
        placeholder: "example@email.com",
        validations: [
          { type: "required", messageKey: "form.error.required" },
          { type: "email", messageKey: "form.error.email.invalid" },
        ],
      }),

      createInputField("phone", {
        type: "tel",
        label: "S·ªë ƒëi·ªán tho·∫°i",
        placeholder: "0912345678",
        validations: [
          { type: "required", messageKey: "form.error.required" },
          {
            type: "regex",
            value: "^[0-9]{10}$",
            messageKey: "form.error.phone.invalid",
          },
        ],
      }),

      createDatePickerField("dateOfBirth", {
        label: "Ng√†y sinh",
        placeholder: "Ch·ªçn ng√†y sinh",
        validations: [{ type: "required", messageKey: "form.error.required" }],
      }),

      createSelectField("gender", {
        label: "Gi·ªõi t√≠nh",
        placeholder: "Ch·ªçn gi·ªõi t√≠nh",
        options: [
          { value: "male", label: "Nam" },
          { value: "female", label: "N·ªØ" },
          { value: "other", label: "Kh√°c" },
        ],
        validations: [{ type: "required", messageKey: "form.error.required" }],
      }),

      createInputField("address", {
        label: "ƒê·ªãa ch·ªâ hi·ªán t·∫°i",
        placeholder: "S·ªë nh√†, ƒë∆∞·ªùng, qu·∫≠n/huy·ªán, th√†nh ph·ªë",
        validations: [
          { type: "required", messageKey: "form.error.required" },
          { type: "minLength", value: 10, messageKey: "form.error.minLength" },
        ],
      }),

      createSelectField("city", {
        label: "T·ªânh/Th√†nh ph·ªë",
        placeholder: "Ch·ªçn t·ªânh/th√†nh ph·ªë",
        options: [
          { value: "hanoi", label: "H√† N·ªôi" },
          { value: "hcm", label: "TP. H·ªì Ch√≠ Minh" },
          { value: "danang", label: "ƒê√† N·∫µng" },
          { value: "haiphong", label: "H·∫£i Ph√≤ng" },
          { value: "cantho", label: "C·∫ßn Th∆°" },
        ],
        validations: [{ type: "required", messageKey: "form.error.required" }],
      }),

      createSelectField("occupation", {
        label: "Ngh·ªÅ nghi·ªáp",
        placeholder: "Ch·ªçn ngh·ªÅ nghi·ªáp",
        options: [
          { value: "employee", label: "Nh√¢n vi√™n vƒÉn ph√≤ng" },
          { value: "business", label: "Kinh doanh" },
          { value: "freelancer", label: "T·ª± do" },
          { value: "student", label: "Sinh vi√™n" },
          { value: "other", label: "Kh√°c" },
        ],
        validations: [{ type: "required", messageKey: "form.error.required" }],
      }),

      createSelectField("monthlyIncome", {
        label: "Thu nh·∫≠p h√†ng th√°ng",
        placeholder: "Ch·ªçn m·ª©c thu nh·∫≠p",
        options: [
          { value: "under5", label: "D∆∞·ªõi 5 tri·ªáu" },
          { value: "5to10", label: "5 - 10 tri·ªáu" },
          { value: "10to20", label: "10 - 20 tri·ªáu" },
          { value: "20to50", label: "20 - 50 tri·ªáu" },
          { value: "above50", label: "Tr√™n 50 tri·ªáu" },
        ],
        validations: [{ type: "required", messageKey: "form.error.required" }],
      }),
    ],
    {
      description: "Vui l√≤ng cung c·∫•p th√¥ng tin c√° nh√¢n c·ªßa b·∫°n",
      icon: <User className="h-5 w-5" />,
    },
  )

  // Step 2: eKYC Verification
  .addStep(
    "ekyc-verification",
    "X√°c th·ª±c danh t√≠nh",
    [
      createEkycField("ekycVerification", {
        label: "X√°c th·ª±c danh t√≠nh eKYC",
        description: "Vui l√≤ng ho√†n t·∫•t x√°c th·ª±c khu√¥n m·∫∑t ƒë·ªÉ ti·∫øp t·ª•c",
        flowType: "FACE",
        language: "vi",
        height: 600,
        validations: [{ type: "required", messageKey: "form.error.required" }],
      }),
    ],
    {
      description: "X√°c minh danh t√≠nh c·ªßa b·∫°n qua eKYC",
      icon: <Shield className="h-5 w-5" />,
    },
  )

  // Step 3: Review & Confirmation
  .addStep(
    "confirmation",
    "X√°c nh·∫≠n th√¥ng tin",
    [
      // Confirmation component reads all form data from context
      createConfirmationField("review"),
    ],
    {
      description: "Xem l·∫°i v√† x√°c nh·∫≠n th√¥ng tin",
      icon: <CheckCircle className="h-5 w-5" />,
    },
  )

  // Enable data persistence with localStorage
  .persistData(true, "user-onboarding-data")

  // Allow users to go back to previous steps
  .allowBackNavigation(true)

  // Set progress indicator style
  .setProgressStyle("steps")

  // Callback when each step is completed
  .onStepComplete(async (stepId, stepData) => {
    console.log(`‚úÖ Step "${stepId}" completed:`, stepData);

    // You can save data to backend here
    // Example:
    // try {
    //   await fetch('/api/onboarding/save-step', {
    //     method: 'POST',
    //     headers: { 'Content-Type': 'application/json' },
    //     body: JSON.stringify({ stepId, data: stepData }),
    //   });
    // } catch (error) {
    //   console.error('Failed to save step:', error);
    //   throw error; // This will prevent moving to next step
    // }
  })

  // Callback when user navigates between steps
  .onStepChange((fromStep, toStep) => {
    console.log(`üìç Navigating from "${fromStep}" to "${toStep}"`);

    // Analytics tracking
    // gtag('event', 'step_change', {
    //   from: fromStep,
    //   to: toStep,
    //   category: 'user_onboarding',
    // });
  })

  // Callback when entire form is completed
  .onComplete(async (allData) => {
    console.log("üéâ Onboarding completed! All data:", allData);

    // Final submission to backend
    try {
      const response = await fetch("/api/onboarding/complete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(allData),
      });

      if (!response.ok) {
        throw new Error("Failed to complete onboarding");
      }

      const result = await response.json();
      console.log("‚úÖ Onboarding saved:", result);

      // Clear localStorage after successful submission
      localStorage.removeItem("user-onboarding-data");

      // Redirect to success page with application data
      const appId = result.data?.applicationId || "N/A";
      const email = result.data?.email || allData["basic-info"]?.email || "";

      window.location.href = `/onboarding-success?appId=${appId}&email=${encodeURIComponent(email)}`;
    } catch (error) {
      console.error("‚ùå Failed to complete onboarding:", error);
      alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!");
      throw error;
    }
  })

  .build();

export default function UserOnboardingPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            ƒêƒÉng k√Ω t√†i kho·∫£n vay
          </h1>
          <p className="text-lg text-gray-600">
            Ho√†n t·∫•t c√°c b∆∞·ªõc sau ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i
          </p>
        </div>

        {/* Multi-Step Form */}
        <div className="bg-white rounded-2xl shadow-xl p-8">
          <MultiStepFormRenderer config={userOnboardingForm} />
        </div>

        {/* Footer Info */}
        <div className="mt-8 text-center text-sm text-gray-600">
          <p>
            üîí Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t tuy·ªát ƒë·ªëi theo{" "}
            <a href="/privacy" className="text-blue-600 hover:underline">
              ch√≠nh s√°ch b·∫£o m·∫≠t
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}
